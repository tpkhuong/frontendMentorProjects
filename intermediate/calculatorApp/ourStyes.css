:root {
  /* theme 1 */

  /* bg 1 */
  --col-theme1-bg-main: hsl(222, 26%, 31%);
  --col-theme1-bg-toggle-keypad: hsl(223, 31%, 20%);
  --col-theme1-bg-screen: hsl(224, 36%, 15%);

  /* keys 1 */
  /* delete and reset btn */
  --col-theme1-keys-bg: hsl(225, 21%, 49%);
  --col-theme1-keys-dark-blue-shadow: hsl(224, 28%, 35%);
  /* equal btn */
  --col-theme1-keys-bg-toggle: hsl(6, 63%, 50%);
  --col-theme1-keys-dark-red-shadow: hsl(6, 70%, 34%);
  /* number and operator */
  --col-theme1-keys-orange-bg: hsl(30, 25%, 89%);
  --col-theme1-keys-orange-shadow: hsl(28, 16%, 65%);

  /* text 1 */
  --col-theme1-text-grayish-blue: hsl(221, 14%, 31%);
  /* theme 2 */

  /* bg 2 */
  --col-theme2-bg-main: hsl(0, 0%, 90%);
  --col-theme2-bg-toggle-keypad: hsl(0, 5%, 81%);
  --col-theme2-bg-screen: hsl(0, 0%, 93%);
  /* keys 2 */
  /* delete and reset */
  --col-theme2-keys-bg: hsl(185, 42%, 37%);
  --col-theme2-keys-dark-cyan-shadow: hsl(185, 58%, 25%);
  /* equal btn */
  --col-theme2-keys-bg-toggle: hsl(25, 98%, 40%);
  --col-theme2-keys-dark-orange-shadow: hsl(25, 99%, 27%);
  /* number and operator */
  --col-theme2-keys-yellow-bg: hsl(45, 7%, 89%);
  --col-theme2-keys-grayish-orange-shadow: hsl(35, 11%, 61%);

  /* text 2 */
  --col-theme2-text-grayish-yellow: hsl(60, 10%, 19%);

  /* theme 3 */

  /* bg 3 */
  --col-theme3-bg-main: hsl(268, 75%, 9%);
  --col-theme3-bg-toggle-keypad-screen: hsl(268, 71%, 12%);
  /* keys 3 */
  /* delete and reset btn */
  --col-theme3-keys-bg: hsl(281, 89%, 26%);
  --col-theme3-keys-magenta-shadow: hsl(285, 91%, 52%);
  /* equal btn */
  --col-theme3-keys-bg-toggle: hsl(176, 100%, 44%);
  --col-theme3-keys-soft-cyan-shadow: hsl(177, 92%, 70%);
  /* number and operator */
  --col-theme3-keys-violet-bg: hsl(268, 47%, 21%);
  --col-theme3-keys-dark-magenta-shadow: hsl(290, 70%, 36%);
  /* text 3 */
  --col-theme3-text-light-yellow: hsl(52, 100%, 62%);
  --col-theme3-text-dark-blue: hsl(198, 20%, 13%);

  /* --card-border-radius: 16px;
  --footer-bg-color: hsl(192, 100%, 9%); */
  --col-neutral-white: hsl(0, 100%, 100%);
  --col-neutral-black: hsl(0, 0%, 0%);

  --box-shadow: 0px 0.3px 0.7px rgba(0, 0, 0, 0.02),
    0px 0.7px 1.7px rgba(0, 0, 0, 0.028), 0px 1.4px 3.3px rgba(0, 0, 0, 0.035),
    0px 2.5px 5.8px rgba(0, 0, 0, 0.042), 0px 4.6px 10.9px rgba(0, 0, 0, 0.05),
    0px 11px 26px rgba(0, 0, 0, 0.07);

  /* headings */
  /* --font-family-poppins: "Poppins", sans-serif; */
  /* body, call-to-actions */
  --font-family-spartan: "Spartan", sans-serif;
}

/* margin collapse: when one of the element is block and the other element is inline-block
bottom margin on block and top margin on inline-block will not collapse. interesting
*/

/* reset */

*,
*::before,
*::after {
  box-sizing: border-box;
}

/* code below is from inclusive design patterns */
/* html {
  font-size: calc(1em + 1vw);
} */

body {
  color: var(--col-neutral-black);
  font-family: var(--font-family-spartan);
  /* use color: revert for text that we dont want to be grayish blue */
  /* color: var(--color-neutral-grayish-blue); */
}

h1,
h2,
h3,
h4,
body,
ul {
  margin: 0;
  /* figure, dl, and dd have default margin */
  /* font-weight: 100; */
}

h1,
h2,
h3,
h4 {
  line-height: 1;
  font-family: var(--font-family-poppins);
}

p {
  line-height: 1.5;
}

a {
  text-decoration: none;
  color: var(--link-fg, var(--clr-neutral-black));
  font-weight: var(--fw-700);
  font-size: var(--fs-300);
}

a:hover,
a:focus {
  /* text-decoration: underline; */
}

a:focus {
  outline: 3px solid rgb(9, 138, 180);
  /* outline-offset: 2px; */
}

img {
  /* using object-fit for images. we have to set a height or a min-height on the image and the width of 100% 
  exception to the rule of setting a height. we can sometime use it on a child element.
  */
  max-width: 100%;
  /* we use max-width: 100% so when we have an img element inside of a div and we want to use flex which means the div will be a flex item
    the img will shrink and grow as its parent element shrink and grows
    */
  /* use display: block so our img fits the container.
    when we didnt have display: block on img element the image did not fill the container.
    there were some white space
    */
  display: block;
  height: auto;
}

ul[role],
li[role] {
  list-style: none;
  padding: 0;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
  font: inherit;
  color: inherit;
}

button {
  border: none;
}

/* button {

/* Remove all animations and transitions for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* reset */

/* utilities */

/* skip link using attr selector */

[href="#main-content"] {
  position: absolute;
  top: 0;
  right: 100%; /* moves off screen */
}
[href="#main-content"]:focus {
  right: auto;
}

/* skip link using attr selector */

/* we can use min-height on the element we want its height to be 100% */
html,
body {
  height: 100%;
}
/* we can use min-height on the element we want its height to be 100% */

/* container wrapper */

.max-width {
  /* or the width we want our container/parent element to be */
  max-width: 350px;
  margin-inline-start: auto;
  margin-inline-end: auto;
  /* padding-inline-start: 16px;
  padding-inline-end: 16px; */
}

@media screen and (min-width: 90rem) {
  .max-width {
    max-width: 550px;
  }
}

.text-max-width-wrapper {
  max-width: 150px;
  margin-inline: auto;
}

/* container wrapper */

.flow-content > * + * {
  margin: var(--gap, 8px) 0 0 0;
}

/* @media screen and (min-width: 90rem){

} */

.columns {
  display: flex;
  flex-direction: column;
  /* flex-flow: column; */
}

.columns > * {
  /* flex:1 => flex-basis will be 0px */
  flex: 1;
  flex-basis: 100%;
}

[class*="col-"] {
  flex-basis: var(--col-basis, 100%);
}

.col-1 {
  --col-basis: 25%;
}
.col-2 {
  --col-basis: 50%;
}
.col-3 {
  --col-basis: 75%;
}

[class*="bg-"] {
  background-color: var(--bg, hsl(0, 100%, 100%));
  background-image: var(--bg-img, hsl(0, 100%, 100%));
  color: var(--fg, hsl(0, 0%, 0%));
}

/* change for next project */

[class="btn-"] {
  background-color: var(--btn-bg);
  /* background-image: var(--btn-bg-img, hsl(0, 100%, 100%)); */
  /* text-transform: uppercase; */
  color: var(--btn-fg, hsl(0, 100%, 100%));
  /* padding-block: 16px;
  margin-block-start: 34px;
  border-radius: 6px; */
  /* padding: 12px;
  padding-inline: 46px;
  border-radius: 100vw; */
}

.bg-dark {
  /* --bg: ; */
  --bg-img: var(--col-bg-image);
  --fg: var(--col-neutral-very-grayish-blue);
}

.bg-light {
  --bg: var(--col-neutral-very-grayish-blue);
  --fg: var(--col-neutral-grayish-blue);
}

/* .btn-primary .front-of-button {
  --btn-bg: var(--col-pri-strong-cyan);
}

.btn-primary.back-of-button {
  --btn-bg: var(--col-pri-back-bg);
}

.btn-secondary .front-of-button {
  --btn-bg: var(--col-pri-light-blue);
}

.btn-secondary.back-of-button {
  --btn-bg: var(--col-sec-back-bg);
} */

.btn-light {
  /* --btn-bg: ; */
  /* --fg is declared in .bg-dark which is applied to the parent element of the element that has .btn-light */
  /* <div class="bg-dark">
      <button class="btn-light">hello</button>
    </div> */
  /* since <button> is a child of div with .bg-dark we can use --fg on div children */
  --btn-bg: var(--col-neutral-white);
  --btn-fg: var(--col-pri-pink);
}

.btn-dark {
  --btn-bg-img: var(--col-bg-image);
  --btn-bg: ;
  --btn-fg: var(--col-neutral-very-grayish-blue);
}

.btn-accent {
  font-size: 0.75rem;
  font-weight: 700;

  padding: 12px;
  padding-inline: 56px;
  border-radius: 100vw;

  box-shadow: var(--box-shadow);

  --btn-bg: var(--col-pri-pink);
  --btn-fg: var(--col-neutral-white);
}

/* themes */

[class*="-theme"] {
  background-color: var(--theme-bg);
  color: var(--theme-fg);
}

.dark-theme {
  background-color: var(--dark-bg);
  color: var(--dark-fg);
  --dark-bg: var(--first-color);
}

.light-theme {
  background-color: var(--light-bg);
  color: var(--light-fg);
}

.accent-theme {
  background-color: var(--accent-bg);
  color: var(--accent-fg);
}

/* .light-theme {
  background-color: var(--light-theme-bg);
  color: var(--light-theme-fg);
}

.dark-theme {
  background-color: var(--dark-theme-bg);
  color: var(--dark-theme-fg);
} */

.low-bold {
  font-weight: 400;
}

.high-bold {
  font-weight: 700;
}

.uppercase-text {
  text-transform: uppercase;
}

.custom-margin {
  margin-block-start: 120px;
  margin-inline-start: 24px;
}

/* .btn-light:hover,
.btn-light:focus {
  background: transparent;
  color: var(--fg);
  border: 0.1px solid currentColor;
} */

.btn-dark:hover,
.btn-dark:focus {
  background: transparent;
  color: var(--col-pri-button-bg);
  border: solid currentColor;
}

button:hover,
a:hover {
  cursor: pointer;
}

/* test out [class*=btn-]{} 
.btn-light{
    --bg
    --fg
}
.btn-dark{
    --bg
    --fg
} 
*/
/* hide h2 which are title for our section element */
.visually-hidden:not(:focus):not(:active) {
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

/* .visually-hidden{
  position: absolute;
  overflow: hidden;
  width: 1px;
  height: 1px;
  clip: rect(1px 1px 1px 1px)
} */

.visually-hidden {
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  height: 1px;
  width: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
}

.skip-link {
  display: inline-block;
  border: 1px solid red;
  padding-block: 16px;
  padding-inline: 32px;
}

/* hide h2 which are title for our section element */

/* .front-to-fit.extra-padding-to-fit.extra-padding-to-fit {
  padding-block: 14px;
} */

/* general style */

.calculator-app-bg {
  display: flex;
  justify-content: center;
  align-items: center;
}

.calculator-style-wrapper {
  padding: 24px;
  /* this declaration */
  flex-basis: 450px;
  /*  
  when our container is a flex item, max-width will not work on this element.
  flex item are intrinsic, max-width element will grow to the property value we set

  flex item will take precedence over max-width which means it will be the width of its content
  max-width: 450px;

  to make it responsive we can set width on this element that is also a flex item
  or we can declare flex-basis.

  flex-basis default is auto but we can set a idle width on our element.
  flex items default values are: flex-grow is 0 so it wont grow
  flex-shrink is 1 which will allow the element to shrink.
  flex-basis is auto. it will take up all the available space.

  we also declared justify-content and align-items: center. our element with
  max-width is being push inline and block direction to the center. so its not allow to grow.
  we can set flex-grow: 1 to make max-width work for our element.

  we can have to make our element responsive:

  flex-basis: 450px without setting a max-width or width declaration on element.
  max-width: 450px and flex-grow: 1;
  
  */

  /* or declaration below will work */

  /* max-width: 450px;
  flex-grow: 1; */
}

/* theme-controller */

.theme-controller-wrapper {
  display: flex;
  align-items: flex-end;
  justify-content: space-between;
}

.app-title {
  font-size: 2rem;
}

.toggle-container {
  font-size: 0.75rem;
  display: flex;
  gap: 16px;
}

.theme-title {
  align-self: flex-end;
  margin-block-end: 3px;
}

.theme-toggle-controller {
  /* setting a width on the parent of both 
    .theme-toggle-controller and .toggle-slider

    we can control the size of both .theme-toggle-controller and .toggle-slider
    by adjusting the width/size of .theme-toglle-controller
    */
  width: 64px;
}

.theme-label-btn-wrapper {
  display: flex;
  justify-content: space-between;
  padding-inline: 8px;
  margin-block-end: 5px;
}

/* .theme-label-btn-wrapper > * + * {
  margin-inline-start: 5px;
} */

.toggle-slider {
  border-radius: 100vw;
  padding: 5px;
}

.toggle-circle {
  display: block;
  height: 16px;
  width: 16px;
  border-radius: 50%;

  transition: transform ease-out 300ms;
}

.toggle-circle.light-theme-movement-onLoad {
  transform: translateX(19px);
}

/* move circle based on input selected */

.toggle-circle.light-movement {
  transform: translateX(19px);
}
.toggle-circle.accent-movement {
  transform: translateX(38px);
}

/* display */

.display {
  margin-block-start: 24px;
  margin-block-end: 16px;
  border-radius: 8px;
  /* padding-block: 16px;
  padding-block-start: 22px; */
  padding-inline-end: 24px;
  text-align: right;

  /* desktop */
  padding-block: 8px;
  padding-block-start: 16px;
}

.current-total-number {
  font-size: 2.5rem;
  display: block;
}

.top-display-keys-pressed {
  display: block;
  font-size: 0.8rem;
  margin-block-end: 6px;
}

/* keys */

.front-of-key {
  /* since our span is a child of our button
    we want to set pointer-events none on the span element
    so when our user clicks on the "keys" with the mouse
    the event.target will be our button element instead of the span element
    */
  pointer-events: none;
  transform: translateY(-4px);
}

.back-of-key,
.front-of-key {
  border-radius: 4px;
}

.keys-container {
  border-radius: 8px;
  padding: 24px;
}

.number-operator-delate-keys-container {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 16px;
}

.number-operator-delate-keys-container span.front-of-key {
  display: block;
  padding: 14px;
  padding-inline: 18px;
  padding-block-start: 16px;
}

.number-key,
.operator-button {
  font-size: 1.7rem;
}

.delete-button,
.reset-button,
.equal-button {
  font-size: 1rem;
}

.delete-button span.front-of-key {
  padding-inline: 12px;
}

.delete-button span.front-of-key,
.decimal-key span.front-of-key {
  padding-block: 21px;
}

.back-of-key {
  display: block;
}

.back-of-key,
.reset-button,
.equal-button {
  padding: 0px;
}

/* reset and equal buttons */

.reset-button,
.equal-button {
  display: block;
  border-radius: 8px;
}

.reset-equal-buttons {
  margin-block-start: 16px;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 16px;
}

.reset-equal-buttons .front-of-key {
  display: block;
  padding-block: 16px;
}

@media screen and (min-width: 90rem) {
  /* input has focus */

  button:focus {
    outline-offset: 4px;
    outline: 4px solid blue;
  }

  /* border: 1px solid red; */
  [aria-label*="-theme"]:focus-within {
    outline-offset: 2px;
    outline: 2px solid var(--col-theme2-keys-bg-toggle);
    /* border: 1px solid red; */
  }

  .app-title {
    font-size: 1.6rem;
  }
  .toggle-container {
    font-size: 0.55rem;
  }

  .theme-toggle-controller {
    /* setting a width on the parent of both 
    .theme-toggle-controller and .toggle-slider

    we can control the size of both .theme-toggle-controller and .toggle-slider
    by adjusting the width/size of .theme-toglle-controller
    */
    width: 58px;
  }

  .toggle-slider {
    padding: 4px;
  }

  .toggle-circle {
    height: 10px;
    width: 10px;
  }

  .number-key,
  .operator-button {
    font-size: 1.5rem;
  }

  .number-operator-delate-keys-container span.front-of-key {
    padding: 10px;
    padding-block-start: 13px;
  }

  .delete-button span.front-of-key,
  .decimal-key span.front-of-key {
    padding-block: 16px;
  }

  .decimal-key span.front-of-key {
    font-size: 1.8rem;
    padding-block-end: 10px;
    padding-block-start: 8px;
  }
}

/* bg and fg color */

/* calculator */

/* toggle container */

.calculator-app-bg {
  min-height: 100%;
}

/***** dark-theme *****/

.dark-theme.calculator-app-bg {
  background-color: var(--col-theme1-bg-main);
  color: var(--col-neutral-white);
}

.dark-theme .toggle-slider {
  background-color: var(--col-theme1-bg-toggle-keypad);
}

.dark-theme .toggle-circle {
  background-color: var(--col-theme1-keys-bg-toggle);
}

@media (prefers-color-scheme: dark) {
  .dark-theme.calculator-app-bg {
    background-color: var(--col-theme1-bg-main);
    color: var(--col-neutral-white);
  }

  .dark-theme .toggle-slider {
    background-color: var(--col-theme1-bg-toggle-keypad);
  }

  .dark-theme .toggle-circle {
    background-color: var(--col-theme1-keys-bg-toggle);
  }
}

/* .dark-theme .theme-controller-wrapper {
    background-color: ;
} */

/***** light-theme *****/

.light-theme.calculator-app-bg {
  background-color: var(--col-theme2-bg-main);
  color: var(--col-theme2-text-grayish-yellow);
}

.light-theme .toggle-slider {
  background-color: var(--col-theme2-bg-toggle-keypad);
}

.light-theme .toggle-circle {
  background-color: var(--col-theme2-keys-bg-toggle);
}

@media (prefers-color-scheme: light) {
  .light-theme.calculator-app-bg {
    background-color: var(--col-theme2-bg-main);
    color: var(--col-theme2-text-grayish-yellow);
  }

  .light-theme .toggle-slider {
    background-color: var(--col-theme2-bg-toggle-keypad);
  }

  .light-theme .toggle-circle {
    background-color: var(--col-theme2-keys-bg-toggle);
  }
}

/***** accent-theme *****/

.accent-theme.calculator-app-bg {
  background-color: var(--col-theme3-bg-main);
  color: var(--col-theme3-text-light-yellow);
}

.accent-theme .toggle-slider {
  background-color: var(--col-theme3-bg-toggle-keypad-screen);
}

.accent-theme .toggle-circle {
  background-color: var(--col-theme3-keys-bg-toggle);
}

/* display container */

/***** dark-theme *****/

.dark-theme .display {
  background-color: var(--col-theme1-bg-screen);
}

@media (prefers-color-scheme: dark) {
  .dark-theme .display {
    background-color: var(--col-theme1-bg-screen);
  }
}

/***** light-theme *****/

.light-theme .display {
  background-color: var(--col-theme2-bg-screen);
}
@media (prefers-color-scheme: light) {
  .light-theme .display {
    background-color: var(--col-theme2-bg-screen);
  }
}

/***** accent-theme *****/

.accent-theme .display {
  background-color: var(--col-theme3-bg-toggle-keypad-screen);
}

/* keys container */

/***** dark-theme *****/

.dark-theme .keys-container {
  background-color: var(--col-theme1-bg-toggle-keypad);
}

/* number and operator */

.dark-theme .front-of-key {
  background-color: var(--col-theme1-keys-orange-bg);
  color: var(--col-theme1-text-grayish-blue);
}

.dark-theme .back-of-key {
  background-color: var(--col-theme1-keys-orange-shadow);
}

/* reset and delete */

.dark-theme .reset-button .front-of-key,
.dark-theme .delete-button .front-of-key {
  background-color: var(--col-theme1-keys-bg);
  color: var(--col-neutral-white);
}

.dark-theme .reset-button,
.dark-theme .delete-button {
  background-color: var(--col-theme1-keys-dark-blue-shadow);
}

/* equal  */

.dark-theme .equal-button .front-of-key {
  background-color: var(--col-theme1-keys-bg-toggle);
  color: var(--col-neutral-white);
}

.dark-theme .equal-button {
  background-color: var(--col-theme1-keys-dark-red-shadow);
}

@media (prefers-color-scheme: dark) {
  /***** dark-theme *****/

  .dark-theme .keys-container {
    background-color: var(--col-theme1-bg-toggle-keypad);
  }

  /* number and operator */

  .dark-theme .front-of-key {
    background-color: var(--col-theme1-keys-orange-bg);
    color: var(--col-theme1-text-grayish-blue);
  }

  .dark-theme .back-of-key {
    background-color: var(--col-theme1-keys-orange-shadow);
  }

  /* reset and delete */

  .dark-theme .reset-button .front-of-key,
  .dark-theme .delete-button .front-of-key {
    background-color: var(--col-theme1-keys-bg);
    color: var(--col-neutral-white);
  }

  .dark-theme .reset-button,
  .dark-theme .delete-button {
    background-color: var(--col-theme1-keys-dark-blue-shadow);
  }

  /* equal  */

  .dark-theme .equal-button .front-of-key {
    background-color: var(--col-theme1-keys-bg-toggle);
    color: var(--col-neutral-white);
  }

  .dark-theme .equal-button {
    background-color: var(--col-theme1-keys-dark-red-shadow);
  }
}

/***** light-theme *****/

.light-theme .keys-container {
  background-color: var(--col-theme2-bg-toggle-keypad);
}

/* number and operator */

.light-theme .front-of-key {
  background-color: var(--col-theme2-keys-yellow-bg);
  /* color: var(--col-theme1-text-grayish-blue); */
}

.light-theme .back-of-key {
  background-color: var(--col-theme2-keys-grayish-orange-shadow);
}

/* reset and delete */

.light-theme .reset-button .front-of-key,
.light-theme .delete-button .front-of-key {
  background-color: var(--col-theme2-keys-bg);
  color: var(--col-neutral-white);
}

.light-theme .reset-button,
.light-theme .delete-button {
  background-color: var(--col-theme2-keys-dark-cyan-shadow);
}

/* equal  */

.light-theme .equal-button .front-of-key {
  background-color: var(--col-theme2-keys-bg-toggle);
  color: var(--col-neutral-white);
}

.light-theme .equal-button {
  background-color: var(--col-theme2-keys-dark-orange-shadow);
}

@media (prefers-color-scheme: light) {
  /***** light-theme *****/

  .light-theme .keys-container {
    background-color: var(--col-theme2-bg-toggle-keypad);
  }

  /* number and operator */

  .light-theme .front-of-key {
    background-color: var(--col-theme2-keys-yellow-bg);
    /* color: var(--col-theme1-text-grayish-blue); */
  }

  .light-theme .back-of-key {
    background-color: var(--col-theme2-keys-grayish-orange-shadow);
  }

  /* reset and delete */

  .light-theme .reset-button .front-of-key,
  .light-theme .delete-button .front-of-key {
    background-color: var(--col-theme2-keys-bg);
    color: var(--col-neutral-white);
  }

  .light-theme .reset-button,
  .light-theme .delete-button {
    background-color: var(--col-theme2-keys-dark-cyan-shadow);
  }

  /* equal  */

  .light-theme .equal-button .front-of-key {
    background-color: var(--col-theme2-keys-bg-toggle);
    color: var(--col-neutral-white);
  }

  .light-theme .equal-button {
    background-color: var(--col-theme2-keys-dark-orange-shadow);
  }
}

/***** accent-theme *****/

.accent-theme .keys-container {
  background-color: var(--col-theme3-bg-toggle-keypad-screen);
}

/* number and operator */

.accent-theme .front-of-key {
  background-color: var(--col-theme3-keys-bg);
  /* color: var(--col-theme1-text-grayish-blue); */
}

.accent-theme .back-of-key {
  background-color: var(--col-theme3-keys-dark-magenta-shadow);
}

/* reset and delete */

.accent-theme .reset-button .front-of-key,
.accent-theme .delete-button .front-of-key {
  background-color: var(--col-theme3-keys-bg);
  color: var(--col-neutral-white);
}

.accent-theme .reset-button,
.accent-theme .delete-button {
  background-color: var(--col-theme3-keys-magenta-shadow);
}

/* equal  */

.accent-theme .equal-button .front-of-key {
  background-color: var(--col-theme3-keys-bg-toggle);
  color: var(--col-theme3-text-dark-blue);
}

.accent-theme .equal-button {
  background-color: var(--col-theme3-keys-soft-cyan-shadow);
}
