:root {
  --col-pri-pink: hsl(322, 100%, 66%);
  --col-pri-light-link: hsl(321, 100%, 78%);
  --col-pri-light-red: hsl(0, 100%, 63%);
  --col-pri-section-bg: hsl(207, 100%, 98%);

  --col-accent-bright-blue: hsl(224, 93%, 58%);
  --col-accent-moderate-cyan: hsl(170, 45%, 43%);
  --col-link: hsl(182, 25%, 46%);

  --col-neutral-dark-cyan: hsl(192, 100%, 9%);
  --col-neutral-pale-blue: hsl(207, 100%, 98%);

  /* --card-border-radius: 16px;
  --footer-bg-color: hsl(192, 100%, 9%); */
  --col-neutral-white: hsl(0, 100%, 100%);
  --col-neutral-black: hsl(0, 0%, 0%);

  --box-shadow: 0px 0.3px 0.7px rgba(0, 0, 0, 0.02),
    0px 0.7px 1.7px rgba(0, 0, 0, 0.028), 0px 1.4px 3.3px rgba(0, 0, 0, 0.035),
    0px 2.5px 5.8px rgba(0, 0, 0, 0.042), 0px 4.6px 10.9px rgba(0, 0, 0, 0.05),
    0px 11px 26px rgba(0, 0, 0, 0.07);

  /* headings */
  --font-family-poppins: "Poppins", sans-serif;
  /* body, call-to-actions */
  --font-family-open-sans: "Open Sans", sans-serif;
}

/* margin collapse: when one of the element is block and the other element is inline-block
bottom margin on block and top margin on inline-block will not collapse. interesting
*/

/* reset */

*,
*::before,
*::after {
  box-sizing: border-box;
}

/* code below is from inclusive design patterns */
/* html {
  font-size: calc(1em + 1vw);
} */

body {
  color: var(--col-neutral-black);
  font-family: var(--font-family-open-sans);
  /* use color: revert for text that we dont want to be grayish blue */
  /* color: var(--color-neutral-grayish-blue); */
}

h1,
h2,
h3,
h4,
body,
ul {
  margin: 0;
  /* figure, dl, and dd have default margin */
  /* font-weight: 100; */
}

h1,
h2,
h3,
h4 {
  line-height: 1;
  font-family: var(--font-family-poppins);
}

p {
  line-height: 1.5;
}

a {
  text-decoration: none;
  color: var(--link-fg, var(--clr-neutral-black));
  font-weight: var(--fw-700);
  font-size: var(--fs-300);
}

a:hover,
a:focus {
  /* text-decoration: underline; */
}

a:focus {
  outline: 3px solid rgb(9, 138, 180);
  /* outline-offset: 2px; */
}

img {
  /* using object-fit for images. we have to set a height or a min-height on the image and the width of 100% 
  exception to the rule of setting a height. we can sometime use it on a child element.
  */
  max-width: 100%;
  /* we use max-width: 100% so when we have an img element inside of a div and we want to use flex which means the div will be a flex item
    the img will shrink and grow as its parent element shrink and grows
    */
  /* use display: block so our img fits the container.
    when we didnt have display: block on img element the image did not fill the container.
    there were some white space
    */
  display: block;
  height: auto;
}

ul[role],
li[role] {
  list-style: none;
  padding: 0;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
  font: inherit;
  color: inherit;
}

button {
  border: none;
}

/* button {

/* Remove all animations and transitions for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* reset */

/* utilities */

/* skip link using attr selector */

[href="#main-content"] {
  position: absolute;
  top: 0;
  right: 100%; /* moves off screen */
}
[href="#main-content"]:focus {
  right: auto;
}

/* skip link using attr selector */

/* we can use min-height on the element we want its height to be 100% */
html,
body {
  height: 100%;
}
/* we can use min-height on the element we want its height to be 100% */

/* container wrapper */

.max-width {
  /* or the width we want our container/parent element to be */
  max-width: 350px;
  margin-inline-start: auto;
  margin-inline-end: auto;
  /* padding-inline-start: 16px;
  padding-inline-end: 16px; */
}

@media screen and (min-width: 90rem) {
  .max-width {
    max-width: 550px;
  }
}

.text-max-width-wrapper {
  max-width: 150px;
  margin-inline: auto;
}

/* container wrapper */

.flow-content > * + * {
  margin: var(--gap, 8px) 0 0 0;
}

/* @media screen and (min-width: 90rem){

} */

.columns {
  display: flex;
  flex-direction: column;
  /* flex-flow: column; */
}

.columns > * {
  /* flex:1 => flex-basis will be 0px */
  flex: 1;
  flex-basis: 100%;
}

[class*="col-"] {
  flex-basis: var(--col-basis, 100%);
}

.col-1 {
  --col-basis: 25%;
}
.col-2 {
  --col-basis: 50%;
}
.col-3 {
  --col-basis: 75%;
}

[class*="bg-"] {
  background-color: var(--bg, hsl(0, 100%, 100%));
  background-image: var(--bg-img, hsl(0, 100%, 100%));
  color: var(--fg, hsl(0, 0%, 0%));
}

[class*="btn-"] {
  background-color: var(--btn-bg);
  /* background-image: var(--btn-bg-img, hsl(0, 100%, 100%)); */
  /* text-transform: uppercase; */
  color: var(--btn-fg, hsl(0, 100%, 100%));
  /* padding-block: 16px;
  margin-block-start: 34px;
  border-radius: 6px; */
  /* padding: 12px;
  padding-inline: 46px;
  border-radius: 100vw; */
}

.bg-dark {
  /* --bg: ; */
  --bg-img: var(--col-bg-image);
  --fg: var(--col-neutral-very-grayish-blue);
}

.bg-light {
  --bg: var(--col-neutral-very-grayish-blue);
  --fg: var(--col-neutral-grayish-blue);
}

/* .btn-primary .front-of-button {
  --btn-bg: var(--col-pri-strong-cyan);
}

.btn-primary.back-of-button {
  --btn-bg: var(--col-pri-back-bg);
}

.btn-secondary .front-of-button {
  --btn-bg: var(--col-pri-light-blue);
}

.btn-secondary.back-of-button {
  --btn-bg: var(--col-sec-back-bg);
} */

.btn-light {
  /* --btn-bg: ; */
  /* --fg is declared in .bg-dark which is applied to the parent element of the element that has .btn-light */
  /* <div class="bg-dark">
      <button class="btn-light">hello</button>
    </div> */
  /* since <button> is a child of div with .bg-dark we can use --fg on div children */
  --btn-bg: var(--col-accent-bright-blue);
  --btn-fg: var(--col-neutral-white);
}

.btn-dark {
  --btn-bg-img: var(--col-bg-image);
  --btn-bg: ;
  --btn-fg: var(--col-neutral-very-grayish-blue);
}

.btn-accent {
  font-size: 0.75rem;
  font-weight: 700;

  padding: 12px;
  padding-inline: 56px;
  border-radius: 100vw;

  box-shadow: var(--box-shadow);

  --btn-bg: var(--col-pri-pink);
  --btn-fg: var(--col-neutral-white);
}

.light-theme {
  background-color: var(--light-theme-bg);
  color: var(--light-theme-fg);
}

.dark-theme {
  background-color: var(--dark-theme-bg);
  color: var(--dark-theme-fg);
}

.low-bold {
  font-weight: 400;
}

.high-bold {
  font-weight: 700;
}

.uppercase-text {
  text-transform: uppercase;
}

/* .btn-light:hover,
.btn-light:focus {
  background: transparent;
  color: var(--fg);
  border: 0.1px solid currentColor;
} */

.btn-dark:hover,
.btn-dark:focus {
  background: transparent;
  color: var(--col-pri-button-bg);
  border: solid currentColor;
}

button:hover,
a:hover {
  cursor: pointer;
}

/* test out [class*=btn-]{} 
.btn-light{
    --bg
    --fg
}
.btn-dark{
    --bg
    --fg
} 
*/
/* hide h2 which are title for our section element */
.visually-hidden:not(:focus):not(:active) {
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

/* .visually-hidden{
  position: absolute;
  overflow: hidden;
  width: 1px;
  height: 1px;
  clip: rect(1px 1px 1px 1px)
} */

.visually-hidden {
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  height: 1px;
  width: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
}

.skip-link {
  display: inline-block;
  border: 1px solid red;
  padding-block: 16px;
  padding-inline: 32px;
}

/* hide h2 which are title for our section element */
